"""
Management command to populate database with sample university and student data.
Creates ABC University and sample students with auto-generated emails.
"""

from django.core.management.base import BaseCommand
from django.db import transaction
from apps.authentication.models import University, Student


class Command(BaseCommand):
    help = 'Populate database with sample university and student data'

    def add_arguments(self, parser):
        parser.add_argument(
            '--clear',
            action='store_true',
            help='Clear existing data before populating'
        )

    def handle(self, *args, **options):
        """Main command handler"""
        
        if options['clear']:
            self.clear_data()
        
        self.create_university()
        self.create_students()
        
        self.stdout.write(
            self.style.SUCCESS('Successfully populated database with sample data!')
        )

    def clear_data(self):
        """Clear existing data"""
        self.stdout.write('Clearing existing data...')
        
        Student.objects.all().delete()
        University.objects.all().delete()
        
        self.stdout.write(self.style.WARNING('Existing data cleared.'))

    def create_university(self):
        """Create ABC University"""
        self.stdout.write('Creating university...')
        
        university, created = University.objects.get_or_create(
            domain='abc.edu',
            defaults={
                'name': 'ABC University',
                'is_active': True
            }
        )
        
        if created:
            self.stdout.write(
                self.style.SUCCESS(f'Created university: {university.name}')
            )
        else:
            self.stdout.write(f'University already exists: {university.name}')

    def create_students(self):
        """Create sample students with auto-generated emails"""
        self.stdout.write('Creating sample students...')
        
        # Get ABC University
        university = University.objects.get(domain='abc.edu')
        
        # Sample student data - including duplicate names to test email generation
        sample_students = [
            {"unique_id": "abc1", "first_name": "Rahul", "last_name": "Joshi"},
            {"unique_id": "abc2", "first_name": "Rahul", "last_name": "Joshi"},  # Duplicate name
            {"unique_id": "abc3", "first_name": "Priya", "last_name": "Sharma"},
            {"unique_id": "abc4", "first_name": "John", "last_name": "Smith"},
            {"unique_id": "abc5", "first_name": "Sarah", "last_name": "Johnson"},
            {"unique_id": "abc6", "first_name": "Mike", "last_name": "Davis"},
            {"unique_id": "abc7", "first_name": "Emily", "last_name": "Brown"},
            {"unique_id": "abc8", "first_name": "David", "last_name": "Wilson"},
            {"unique_id": "abc9", "first_name": "Priya", "last_name": "Sharma"},  # Another duplicate
            {"unique_id": "abc10", "first_name": "Alex", "last_name": "Taylor"},
        ]
        
        # Create students with database transaction for data integrity
        with transaction.atomic():
            for student_data in sample_students:
                student, created = Student.objects.get_or_create(
                    unique_id=student_data["unique_id"],
                    defaults={
                        'first_name': student_data["first_name"],
                        'last_name': student_data["last_name"],
                        'university': university
                        # Email will be auto-generated by the model
                    }
                )
                
                if created:
                    self.stdout.write(
                        self.style.SUCCESS(
                            f'Created student: {student.unique_id} - '
                            f'{student.first_name} {student.last_name} '
                            f'({student.email})'
                        )
                    )
                else:
                    self.stdout.write(
                        f'Student already exists: {student.unique_id} - {student.email}'
                    )

        # Display summary
        self.display_summary()

    def display_summary(self):
        """Display summary of created data"""
        self.stdout.write('\n' + '='*60)
        self.stdout.write(self.style.SUCCESS('DATABASE POPULATION SUMMARY'))
        self.stdout.write('='*60)
        
        # University count
        university_count = University.objects.count()
        self.stdout.write(f'Universities: {university_count}')
        
        # Student count
        student_count = Student.objects.count()
        self.stdout.write(f'Students: {student_count}')
        
        # Show all students with their generated emails
        self.stdout.write('\nStudents created:')
        students = Student.objects.all().order_by('unique_id')
        
        for student in students:
            self.stdout.write(
                f'  {student.unique_id}: {student.first_name} {student.last_name} '
                f'â†’ {student.email}'
            )
        
        # Show duplicate name handling
        self.stdout.write('\nDuplicate name handling:')
        duplicate_examples = []
        names_seen = {}
        
        for student in students:
            full_name = f"{student.first_name} {student.last_name}"
            if full_name in names_seen:
                duplicate_examples.append(f'  {full_name}:')
                duplicate_examples.append(f'    First: {names_seen[full_name]}')
                duplicate_examples.append(f'    Second: {student.email}')
            else:
                names_seen[full_name] = student.email
        
        if duplicate_examples:
            for line in duplicate_examples:
                self.stdout.write(line)
        else:
            self.stdout.write('  No duplicate names found')
        
        self.stdout.write('='*60)